id1 = data$username[i],
id2 = data$grid_number[i],
id3 = data$type[i],
id4 = data$remaining_lease[i]))
}
# Remove the trailing comma from the query_insert string
query_insert <- substr(query_insert, 1, nchar(query_insert) - 1)
dbExecute(conn, query_insert)
# Return the success message
message <- "Data has been saved successfully"
return(message)
}
# to test
data <- data.frame(
username = c("a", "a", "a"),
grid_number = c(1, 2, 3),
type = c("house", "apartment", "office"),
remaining_lease = c(5, 3, 7)
)
data
SaveCurrentLanduse(conn, data)
getAWSConnection <- function(){
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "student098",
host = "database-1.ceo4ehzjeeg0.ap-southeast-1.rds.amazonaws.com",
username = "student098",
password = "C4Z!RZuJfRq5")
conn
}
SaveCurrentLanduse <- function(conn,data) {
# First, delete any existing records for the given username
username <- unique(data$username)
query_delete <- sqlInterpolate(conn, "DELETE FROM current_land_use WHERE username = ?id1;", id1 = username)
dbExecute(conn, query_delete)
# Then, insert the new records into the current_land_use table
query_insert <- "INSERT INTO current_land_use (username, grid_number, type, remaining_lease) VALUES "
for (i in 1:nrow(data)) {
query_insert <- paste0(query_insert, sqlInterpolate("(?id1, ?id2, ?id3, ?id4),",
id1 = data$username[i],
id2 = data$grid_number[i],
id3 = data$type[i],
id4 = data$remaining_lease[i]))
}
# Remove the trailing comma from the query_insert string
query_insert <- substr(query_insert, 1, nchar(query_insert) - 1)
dbExecute(conn, query_insert)
# Return the success message
message <- "Data has been saved successfully"
return(message)
}
# to test
data <- data.frame(
username = c("a", "a", "a"),
grid_number = c(1, 2, 3),
type = c("house", "apartment", "office"),
remaining_lease = c(5, 3, 7)
)
data
SaveCurrentLanduse(conn, data)
SaveCurrentLanduse( data)
SaveCurrentLanduse <- function(username, grid_number, type, remaining_lease) {
conn <- getAWSConnection()
# First, delete any existing records for the given username
query_delete <- sqlInterpolate(conn, "DELETE FROM current_land_use WHERE username = ?id1;", id1 = username)
dbExecute(conn, query_delete)
# Then, insert the new record into the current_land_use table
query_insert <- sqlInterpolate(conn, "INSERT INTO current_land_use (username, grid_number, type, remaining_lease) VALUES (?id1, ?id2, ?id3, ?id4);", id1 = username, id2 = grid_number, id3 = type, id4 = remaining_lease)
dbExecute(conn, query_insert)
dbDisconnect(conn)
# Return the success message
message <- "Data has been saved successfully"
return(message)
}
library(RMySQL)
SaveCurrentLanduse <- function(conn,data) {
# First, delete any existing records for the given username
username <- unique(data$username)
query_delete <- sqlInterpolate(conn, "DELETE FROM current_land_use WHERE username = ?id1;", id1 = username)
dbExecute(conn, query_delete)
# Then, insert the new records into the current_land_use table
query_insert <- "INSERT INTO current_land_use (username, grid_number, type, remaining_lease) VALUES "
for (i in 1:nrow(data)) {
query_insert <- paste0(query_insert, sqlInterpolate("(?id1, ?id2, ?id3, ?id4),",
id1 = data$username[i],
id2 = data$grid_number[i],
id3 = data$type[i],
id4 = data$remaining_lease[i]))
}
# Remove the trailing comma from the query_insert string
query_insert <- substr(query_insert, 1, nchar(query_insert) - 1)
dbExecute(conn, query_insert)
# Return the success message
message <- "Data has been saved successfully"
return(message)
}
# to test
data <- data.frame(
username = c("a", "a", "a"),
grid_number = c(1, 2, 3),
type = c("house", "apartment", "office"),
remaining_lease = c(5, 3, 7)
)
data
SaveCurrentLanduse(data)
library(RMySQL)
SaveCurrentLanduse <- function(conn, data) {
if (is.null(data) || nrow(data) == 0) {
message <- "Data is empty. No records to save."
return(message)
}
# First, delete any existing records for the given username
username <- unique(data$username)
query_delete <- sqlInterpolate(conn, "DELETE FROM current_land_use WHERE username = ?id1;", id1 = username)
dbExecute(conn, query_delete)
# Then, insert the new records into the current_land_use table
query_insert <- "INSERT INTO current_land_use (username, grid_number, type, remaining_lease) VALUES "
for (i in 1:nrow(data)) {
query_insert <- paste0(query_insert, sqlInterpolate("(?id1, ?id2, ?id3, ?id4),",
id1 = data$username[i],
id2 = data$grid_number[i],
id3 = data$type[i],
id4 = data$remaining_lease[i]))
}
# Remove the trailing comma from the query_insert string
query_insert <- substr(query_insert, 1, nchar(query_insert) - 1)
dbExecute(conn, query_insert)
# Return the success message
message <- "Data has been saved successfully"
return(message)
}
# to test
data <- data.frame(
username = c("a", "a", "a"),
grid_number = c(1, 2, 3),
type = c("house", "apartment", "office"),
remaining_lease = c(5, 3, 7)
)
data
SaveCurrentLanduse(data)
library(RMySQL)
SaveCurrentLanduse <- function(conn, data) {
if (is.null(data) || nrow(data) == 0) {
message <- "Data is empty. No records to save."
return(message)
}
# First, delete any existing records for the given username
username <- unique(data$username)
query_delete <- sqlInterpolate(conn, "DELETE FROM current_land_use WHERE username = ?id1;", id1 = username)
dbExecute(conn, query_delete)
# Then, insert the new records into the current_land_use table
query_insert <- "INSERT INTO current_land_use (username, grid_number, type, remaining_lease) VALUES "
for (i in 1:nrow(data)) {
query_insert <- paste0(query_insert, sqlInterpolate("(?id1, ?id2, ?id3, ?id4),",
id1 = data$username[i],
id2 = data$grid_number[i],
id3 = data$type[i],
id4 = data$remaining_lease[i]))
}
# Remove the trailing comma from the query_insert string
query_insert <- substr(query_insert, 1, nchar(query_insert) - 1)
dbExecute(conn, query_insert)
# Return the success message
message <- "Data has been saved successfully"
return(message)
}
# to test
data <- data.frame(
username = c("a", "a", "a"),
grid_number = c(1, 2, 3),
type = c("house", "apartment", "office"),
remaining_lease = c(5, 3, 7)
)
data
SaveCurrentLanduse(data)
library(RMySQL)
SaveCurrentLanduse <- function(conn, data) {
if (is.null(data) || nrow(data) == 0) {
message <- "Data is empty. No records to save."
return(message)
}
# First, delete any existing records for the given username
username <- unique(data$username)
query_delete <- sqlInterpolate(conn, "DELETE FROM current_land_use WHERE username = ?id1;", id1 = username)
dbExecute(conn, query_delete)
# Then, insert the new records into the current_land_use table
query_insert <- "INSERT INTO current_land_use (username, grid_number, type, remaining_lease) VALUES "
for (i in 1:nrow(data)) {
query_insert <- paste0(query_insert, sqlInterpolate("(?id1, ?id2, ?id3, ?id4),",
id1 = data$username[i],
id2 = data$grid_number[i],
id3 = data$type[i],
id4 = data$remaining_lease[i]))
}
# Remove the trailing comma from the query_insert string
query_insert <- substr(query_insert, 1, nchar(query_insert) - 1)
dbExecute(conn, query_insert)
# Return the success message
message <- "Data has been saved successfully"
return(message)
}
# to test
data <- data.frame(
username = c("a", "a", "a"),
grid_number = c(1, 2, 3),
type = c("house", "apartment", "office"),
remaining_lease = c(5, 3, 7)
)
data
SaveCurrentLanduse(data)
SaveCurrentLanduse <- function(data) {
if (is.null(data) || nrow(data) == 0) {
message <- "Data is empty. No records to save."
return(message)
}
# First, delete any existing records for the given username
username <- unique(data$username)
query_delete <- sqlInterpolate(conn, "DELETE FROM current_land_use WHERE username = ?id1;", id1 = username)
dbExecute(conn, query_delete)
# Then, insert the new records into the current_land_use table
query_insert <- "INSERT INTO current_land_use (username, grid_number, type, remaining_lease) VALUES "
for (i in 1:nrow(data)) {
query_insert <- paste0(query_insert, sqlInterpolate("(?id1, ?id2, ?id3, ?id4),",
id1 = data$username[i],
id2 = data$grid_number[i],
id3 = data$type[i],
id4 = data$remaining_lease[i]))
}
# Remove the trailing comma from the query_insert string
query_insert <- substr(query_insert, 1, nchar(query_insert) - 1)
dbExecute(conn, query_insert)
# Return the success message
message <- "Data has been saved successfully"
return(message)
}
# to test
data <- data.frame(
username = c("a", "a", "a"),
grid_number = c(1, 2, 3),
type = c("house", "apartment", "office"),
remaining_lease = c(5, 3, 7)
)
data
SaveCurrentLanduse(data)
library(RMySQL)
SaveCurrentLanduse <- function(data) {
if (is.null(data) || nrow(data) == 0) {
message <- "Data is empty. No records to save."
return(message)
}
# First, delete any existing records for the given username
username <- unique(data$username)
query_delete <- sqlInterpolate(conn, "DELETE FROM current_land_use WHERE username = ?id1;", id1 = username)
dbExecute(conn, query_delete)
# Then, insert the new records into the current_land_use table
query_insert <- "INSERT INTO current_land_use (username, grid_number, type, remaining_lease) VALUES "
for (i in 1:nrow(data)) {
query_insert <- paste0(query_insert, sqlInterpolate("(?id1, ?id2, ?id3, ?id4),",
id1 = data$username[i],
id2 = data$grid_number[i],
id3 = data$type[i],
id4 = data$remaining_lease[i]))
}
# Remove the trailing comma from the query_insert string
query_insert <- substr(query_insert, 1, nchar(query_insert) - 1)
dbExecute(conn, query_insert)
# Return the success message
message <- "Data has been saved successfully"
return(message)
}
# to test
data <- data.frame(
username = c("a", "a", "a"),
grid_number = c(1, 2, 3),
type = c("house", "apartment", "office"),
remaining_lease = c(5, 3, 7)
)
data
SaveCurrentLanduse(data)
SaveCurrentLanduse <- function(conn,data) {
if (is.null(data) || nrow(data) == 0) {
message <- "Data is empty. No records to save."
return(message)
}
# First, delete any existing records for the given username
username <- unique(data$username)
query_delete <- sqlInterpolate(conn, "DELETE FROM current_land_use WHERE username = ?id1;", id1 = username)
dbExecute(conn, query_delete)
# Then, insert the new records into the current_land_use table
query_insert <- "INSERT INTO current_land_use (username, grid_number, type, remaining_lease) VALUES "
for (i in 1:nrow(data)) {
query_insert <- paste0(query_insert, sqlInterpolate("(?id1, ?id2, ?id3, ?id4),",
id1 = data$username[i],
id2 = data$grid_number[i],
id3 = data$type[i],
id4 = data$remaining_lease[i]))
}
# Remove the trailing comma from the query_insert string
query_insert <- substr(query_insert, 1, nchar(query_insert) - 1)
dbExecute(conn, query_insert)
# Return the success message
message <- "Data has been saved successfully"
return(message)
}
# to test
data <- data.frame(
username = c("a", "a", "a"),
grid_number = c(1, 2, 3),
type = c("house", "apartment", "office"),
remaining_lease = c(5, 3, 7)
)
data
SaveCurrentLanduse(data)
SaveCurrentLanduse(conn, data)
conn <- getAWSConnection()
SaveCurrentLanduse <- function(conn,data) {
if (is.null(data) || nrow(data) == 0) {
message <- "Data is empty. No records to save."
return(message)
}
# First, delete any existing records for the given username
username <- unique(data$username)
query_delete <- sqlInterpolate(conn, "DELETE FROM current_land_use WHERE username = ?id1;", id1 = username)
dbExecute(conn, query_delete)
# Then, insert the new records into the current_land_use table
query_insert <- "INSERT INTO current_land_use (username, grid_number, type, remaining_lease) VALUES "
for (i in 1:nrow(data)) {
query_insert <- paste0(query_insert, sqlInterpolate("(?id1, ?id2, ?id3, ?id4),",
id1 = data$username[i],
id2 = data$grid_number[i],
id3 = data$type[i],
id4 = data$remaining_lease[i]))
}
# Remove the trailing comma from the query_insert string
query_insert <- substr(query_insert, 1, nchar(query_insert) - 1)
dbExecute(conn, query_insert)
# Return the success message
message <- "Data has been saved successfully"
return(message)
}
# to test
data <- data.frame(
username = c("a", "a", "a"),
grid_number = c(1, 2, 3),
type = c("house", "apartment", "office"),
remaining_lease = c(5, 3, 7)
)
data
SaveCurrentLanduse(conn, data)
library(RMySQL)
conn <- getAWSConnection()
SaveCurrentLanduse <- function(conn,data) {
if (is.null(data) || nrow(data) == 0) {
message <- "Data is empty. No records to save."
return(message)
}
# First, delete any existing records for the given username
username <- unique(data$username)
query_delete <- sqlInterpolate(conn, "DELETE FROM current_land_use WHERE username = ?id1;", id1 = username)
dbExecute(conn, query_delete)
# Then, insert the new records into the current_land_use table
query_insert <- "INSERT INTO current_land_use (username, grid_number, type, remaining_lease) VALUES "
for (i in 1:nrow(data)) {
query_insert <- paste0(query_insert, sqlInterpolate("(?id1, ?id2, ?id3, ?id4)",
id1 = data$username[i],
id2 = data$grid_number[i],
id3 = data$type[i],
id4 = data$remaining_lease[i]))
}
# Remove the trailing comma from the query_insert string
query_insert <- substr(query_insert, 1, nchar(query_insert) - 1)
dbExecute(conn, query_insert)
# Return the success message
message <- "Data has been saved successfully"
return(message)
}
# to test
data <- data.frame(
username = c("a", "a", "a"),
grid_number = c(1, 2, 3),
type = c("house", "apartment", "office"),
remaining_lease = c(5, 3, 7)
)
data
SaveCurrentLanduse(conn, data)
library(RMySQL)
conn <- getAWSConnection()
SaveCurrentLanduse <- function(conn,data) {
if (is.null(data) || nrow(data) == 0) {
message <- "Data is empty. No records to save."
return(message)
}
# First, delete any existing records for the given username
username <- unique(data$username)
query_delete <- sqlInterpolate(conn, "DELETE FROM current_land_use WHERE username = ?id1;", id1 = username)
dbExecute(conn, query_delete)
# Then, insert the new records into the current_land_use table
query_insert <- "INSERT INTO current_land_use (username, grid_number, type, remaining_lease) VALUES "
for (i in 1:nrow(data)) {
query_insert <- sqlInterpolate(conn, "INSERT INTO current_land_use (username, grid_number, type, remaining_lease) VALUES (?id1, ?id2, ?id3, ?id4)",
id1 = data$username[i],
id2 = data$grid_number[i],
id3 = data$type[i],
id4 = data$remaining_lease[i])
dbExecute(conn, query_insert)
}
# Return the success message
message <- "Data has been saved successfully"
return(message)
}
# to test
data <- data.frame(
username = c("a", "a", "a"),
grid_number = c(1, 2, 3),
type = c("house", "apartment", "office"),
remaining_lease = c(5, 3, 7)
)
data
SaveCurrentLanduse(conn, data)
# Save data onto AWS database
saveGameStatistics <- function(conn, username, year, happiness, budget, population, homelessness, employment) {
# Prepare the query to insert the data into the historical_data table
query <- sprintf("INSERT INTO historical_data (username, year, happiness, budget, population, homelessness, employment) VALUES ('%s', %d, %d, %d, %d, %d, %d)",
username, year, happiness, budget, population, homelessness, employment)
# Execute the query to insert the data into the historical_data table
dbExecute(conn, query)
# Return the success message
message <- "Data has been saved successfully"
return(message)
}
saveGameStatistics(conn, "username1", 2023, 85, 1000, 5000, 10, 90)
getAWSConnection <- function(){
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "student098",
host = "database-1.ceo4ehzjeeg0.ap-southeast-1.rds.amazonaws.com",
username = "student098",
password = "C4Z!RZuJfRq5")
conn
}
# Save data onto AWS database
saveGameStatistics <- function(conn, username, year, happiness, budget, population, homelessness, employment) {
# Prepare the query to insert the data into the historical_data table
query <- sprintf("INSERT INTO historical_data (username, year, happiness, budget, population, homelessness, employment) VALUES ('%s', %d, %d, %d, %d, %d, %d)",
username, year, happiness, budget, population, homelessness, employment)
# Execute the query to insert the data into the historical_data table
dbExecute(conn, query)
# Return the success message
message <- "Data has been saved successfully"
return(message)
}
saveGameStatistics(conn, "username1", 2023, 85, 1000, 5000, 10, 90)
# Save data onto AWS database
conn <- getAWSConnection()
saveGameStatistics <- function(conn, username, year, happiness, budget, population, homelessness, employment) {
# Prepare the query to insert the data into the historical_data table
query <- sprintf("INSERT INTO historical_data (username, year, happiness, budget, population, homelessness, employment) VALUES ('%s', %d, %d, %d, %d, %d, %d)",
username, year, happiness, budget, population, homelessness, employment)
# Execute the query to insert the data into the historical_data table
dbExecute(conn, query)
# Return the success message
message <- "Data has been saved successfully"
return(message)
}
saveGameStatistics(conn, "username1", 2023, 85, 1000, 5000, 10, 90)
# Save data onto AWS database
conn <- getAWSConnection()
saveGameStatistics <- function(conn, username, year, happiness, budget, population, homelessness, employment) {
# Prepare the query to insert the data into the historic_data table
query <- sprintf("INSERT INTO historic_data (username, year, happiness, budget, population, homelessness, employment) VALUES ('%s', %d, %d, %d, %d, %d, %d)",
username, year, happiness, budget, population, homelessness, employment)
# Execute the query to insert the data into the historical_data table
dbExecute(conn, query)
# Return the success message
message <- "Data has been saved successfully"
return(message)
}
saveGameStatistics(conn, "username1", 2023, 85, 1000, 5000, 10, 90)
saveGameStatistics(conn, "a", 2023, 85, 1000, 5000, 10, 90)
RetrieveLeaderboard <- function(username) {
# Get the latest statistics for the given username
latest_stats <- findLatestStatistics(username)
# Check if the latest_stats data frame is not empty
if (nrow(latest_stats) == 0) {
stop("No data found for the given username.")
}
# Connect to the database using the getAWSConnection function
conn <- getAWSConnection()
# Prepare the query to insert data into the leaderboard table
query_template <- "INSERT INTO leaderboard (username, happiness, budget, population, homelessness, employment) VALUES ('%s', %d, %d, %d, %d, %d)"
# Iterate through the rows of the data frame and insert data into the leaderboard table
for (i in 1:nrow(latest_stats)) {
query <- sprintf(query_template,
latest_stats$username[i],
latest_stats$happiness[i],
latest_stats$budget[i],
latest_stats$population[i],
latest_stats$homelessness[i],
latest_stats$employment[i])
# Execute the query to insert the data into the leaderboard table
dbExecute(conn, query)
}
# Disconnect from the database
dbDisconnect(conn)
# Return the success message
message <- "Data has been saved successfully in the leaderboard table."
return(message)
}
RetrieveLeaderboard('a')
# Get the latest statistics for the given username
latest_stats <- findLatestStatistics(username)
findLatestStatistics('a')
